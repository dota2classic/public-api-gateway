/* tslint:disable */
/* eslint-disable */
/**
 * GameServer api
 * Matches, players, mmrs
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";

import {
  MatchmakerGetPartyQueryResultDto,
  MatchmakerGetPartyQueryResultDtoFromJSON,
  MatchmakerGetUserRoomQueryResultRoomInfo,
  MatchmakerGetUserRoomQueryResultRoomInfoFromJSON,
} from "../models";

export interface MatchmakerApiControllerGetUserPartyRequest {
  id: string;
}

export interface MatchmakerApiControllerGetUserRoomRequest {
    id: string;
}

/**
 *
 */
export class MatchmakerApi extends runtime.BaseAPI {

    /**
     */
    matchmakerApiControllerGetUserPartyContext(requestParameters: MatchmakerApiControllerGetUserPartyRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/player/{id}/party`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    matchmakerApiControllerGetUserParty = async (id: string): Promise<MatchmakerGetPartyQueryResultDto> => {
        const response = await this.matchmakerApiControllerGetUserPartyRaw({ id: id });
        return await response.value();
    }

    /**
     */
    matchmakerApiControllerGetUserRoomContext(requestParameters: MatchmakerApiControllerGetUserRoomRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/player/{id}/room`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    matchmakerApiControllerGetUserRoom = async (id: string): Promise<MatchmakerGetUserRoomQueryResultRoomInfo> => {
        const response = await this.matchmakerApiControllerGetUserRoomRaw({ id: id });
        return await response.value();
    }

    /**
     */
    private async matchmakerApiControllerGetUserPartyRaw(requestParameters: MatchmakerApiControllerGetUserPartyRequest): Promise<runtime.ApiResponse<MatchmakerGetPartyQueryResultDto>> {
        this.matchmakerApiControllerGetUserPartyValidation(requestParameters);
        const context = this.matchmakerApiControllerGetUserPartyContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchmakerGetPartyQueryResultDtoFromJSON(jsonValue));
    }

    /**
     */
    private matchmakerApiControllerGetUserPartyValidation(requestParameters: MatchmakerApiControllerGetUserPartyRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling matchmakerApiControllerGetUserParty.');
        }
    }

    /**
     */
    private async matchmakerApiControllerGetUserRoomRaw(requestParameters: MatchmakerApiControllerGetUserRoomRequest): Promise<runtime.ApiResponse<MatchmakerGetUserRoomQueryResultRoomInfo>> {
        this.matchmakerApiControllerGetUserRoomValidation(requestParameters);
        const context = this.matchmakerApiControllerGetUserRoomContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => MatchmakerGetUserRoomQueryResultRoomInfoFromJSON(jsonValue));
    }

    /**
     */
    private matchmakerApiControllerGetUserRoomValidation(requestParameters: MatchmakerApiControllerGetUserRoomRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling matchmakerApiControllerGetUserRoom.');
        }
    }

}
