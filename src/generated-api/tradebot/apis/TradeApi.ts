/* tslint:disable */
/* eslint-disable */
/**
 * GameServer api
 * Matches, players, mmrs
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";

import {
  TradeBotCreateDropTierDto,
  TradeBotCreateDropTierDtoToJSON,
  TradeBotDroppedItemDto,
  TradeBotDroppedItemDtoFromJSON,
  TradeBotDropSettingsDto,
  TradeBotDropSettingsDtoFromJSON,
  TradeBotDropTierDto,
  TradeBotDropTierDtoFromJSON,
  TradeBotPurchaseDto,
  TradeBotPurchaseDtoToJSON,
  TradeBotTradeOfferDto,
  TradeBotTradeOfferDtoFromJSON,
  TradeBotUpdateDropSettingsDto,
  TradeBotUpdateDropSettingsDtoToJSON,
  TradeBotUpdateDropTierDto,
  TradeBotUpdateDropTierDtoToJSON,
  TradeBotUpdateUserDto,
  TradeBotUpdateUserDtoToJSON,
  TradeBotUserDto,
  TradeBotUserDtoFromJSON,
} from "../models";

export interface TradeControllerClaimDropsRequest {
  steamId: string;
}

export interface TradeControllerCreateDropTierRequest {
    tradeBotCreateDropTierDto: TradeBotCreateDropTierDto;
}

export interface TradeControllerDeleteTierRequest {
    id: number;
}

export interface TradeControllerDiscardDropRequest {
    steamId: string;
    assetId: string;
}

export interface TradeControllerGetDropsRequest {
    steamId: string;
}

export interface TradeControllerGetOfferHistoryRequest {
    steamId: string;
}

export interface TradeControllerGetUserRequest {
    steamId: string;
}

export interface TradeControllerPurchaseRequest {
    steamId: string;
    tradeBotPurchaseDto: TradeBotPurchaseDto;
}

export interface TradeControllerUpdateSettingsRequest {
    tradeBotUpdateDropSettingsDto: TradeBotUpdateDropSettingsDto;
}

export interface TradeControllerUpdateTierRequest {
    id: number;
    tradeBotUpdateDropTierDto: TradeBotUpdateDropTierDto;
}

export interface TradeControllerUpdateUserRequest {
    steamId: string;
    tradeBotUpdateUserDto: TradeBotUpdateUserDto;
}

/**
 *
 */
export class TradeApi extends runtime.BaseAPI {

    /**
     */
    private async tradeControllerClaimDropsRaw(requestParameters: TradeControllerClaimDropsRequest): Promise<runtime.ApiResponse<string>> {
        this.tradeControllerClaimDropsValidation(requestParameters);
        const context = this.tradeControllerClaimDropsContext(requestParameters);
        const response = await this.request(context);

        return new runtime.TextApiResponse(response) as any;
    }



    /**
     */
    tradeControllerClaimDropsContext(requestParameters: TradeControllerClaimDropsRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/trade/drops/{steamId}/claim`.replace(`{${"steamId"}}`, encodeURIComponent(String(requestParameters.steamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    tradeControllerCreateDropTierContext(requestParameters: TradeControllerCreateDropTierRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/trade/tiers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TradeBotCreateDropTierDtoToJSON(requestParameters.tradeBotCreateDropTierDto),
        };
    }

    /**
     */
    tradeControllerClaimDrops = async (steamId: string): Promise<string> => {
        const response = await this.tradeControllerClaimDropsRaw({ steamId: steamId });
        return await response.value();
    }

    /**
     */
    tradeControllerCreateDropTier = async (tradeBotCreateDropTierDto: TradeBotCreateDropTierDto): Promise<void> => {
        await this.tradeControllerCreateDropTierRaw({ tradeBotCreateDropTierDto: tradeBotCreateDropTierDto });
    }

    /**
     */
    tradeControllerDeleteTierContext(requestParameters: TradeControllerDeleteTierRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/trade/tiers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    tradeControllerDeleteTier = async (id: number): Promise<void> => {
        await this.tradeControllerDeleteTierRaw({ id: id });
    }

    /**
     */
    tradeControllerGetDropTiersContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/trade/tiers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    tradeControllerGetDropTiers = async (): Promise<Array<TradeBotDropTierDto>> => {
        const response = await this.tradeControllerGetDropTiersRaw();
        return await response.value();
    }

    /**
     */
    tradeControllerGetOfferHistoryContext(requestParameters: TradeControllerGetOfferHistoryRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/trade/user/{steamId}/offers`.replace(`{${"steamId"}}`, encodeURIComponent(String(requestParameters.steamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    tradeControllerGetSettingsContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/trade/settings`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    tradeControllerGetSettings = async (): Promise<TradeBotDropSettingsDto> => {
        const response = await this.tradeControllerGetSettingsRaw();
        return await response.value();
    }

    /**
     */
    private async tradeControllerDiscardDropRaw(requestParameters: TradeControllerDiscardDropRequest): Promise<runtime.ApiResponse<void>> {
        this.tradeControllerDiscardDropValidation(requestParameters);
        const context = this.tradeControllerDiscardDropContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }



    /**
     */
    private tradeControllerDiscardDropValidation(requestParameters: TradeControllerDiscardDropRequest) {
        if (requestParameters.steamId === null || requestParameters.steamId === undefined) {
            throw new runtime.RequiredError('steamId','Required parameter requestParameters.steamId was null or undefined when calling tradeControllerDiscardDrop.');
        }
        if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
            throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling tradeControllerDiscardDrop.');
        }
    }

    /**
     */
    tradeControllerDiscardDropContext(requestParameters: TradeControllerDiscardDropRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/trade/drops/{steamId}/discard/{assetId}`.replace(`{${"steamId"}}`, encodeURIComponent(String(requestParameters.steamId))).replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters.assetId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    tradeControllerDiscardDrop = async (steamId: string, assetId: string): Promise<void> => {
        await this.tradeControllerDiscardDropRaw({ steamId: steamId, assetId: assetId });
    }

    /**
     */
    tradeControllerPurchaseContext(requestParameters: TradeControllerPurchaseRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/trade/user/{steamId}/purchase`.replace(`{${"steamId"}}`, encodeURIComponent(String(requestParameters.steamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TradeBotPurchaseDtoToJSON(requestParameters.tradeBotPurchaseDto),
        };
    }

    /**
     */
    tradeControllerPurchase = async (steamId: string, tradeBotPurchaseDto: TradeBotPurchaseDto): Promise<void> => {
        await this.tradeControllerPurchaseRaw({ steamId: steamId, tradeBotPurchaseDto: tradeBotPurchaseDto });
    }

    /**
     */
    tradeControllerUpdateSettingsContext(requestParameters: TradeControllerUpdateSettingsRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/trade/settings`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TradeBotUpdateDropSettingsDtoToJSON(requestParameters.tradeBotUpdateDropSettingsDto),
        };
    }

    /**
     */
    tradeControllerUpdateSettings = async (tradeBotUpdateDropSettingsDto: TradeBotUpdateDropSettingsDto): Promise<void> => {
        await this.tradeControllerUpdateSettingsRaw({ tradeBotUpdateDropSettingsDto: tradeBotUpdateDropSettingsDto });
    }

    /**
     */
    private async tradeControllerGetDropsRaw(requestParameters: TradeControllerGetDropsRequest): Promise<runtime.ApiResponse<Array<TradeBotDroppedItemDto>>> {
        this.tradeControllerGetDropsValidation(requestParameters);
        const context = this.tradeControllerGetDropsContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradeBotDroppedItemDtoFromJSON));
    }



    /**
     */
    private tradeControllerGetDropsValidation(requestParameters: TradeControllerGetDropsRequest) {
        if (requestParameters.steamId === null || requestParameters.steamId === undefined) {
            throw new runtime.RequiredError('steamId','Required parameter requestParameters.steamId was null or undefined when calling tradeControllerGetDrops.');
        }
    }

    /**
     */
    tradeControllerGetDropsContext(requestParameters: TradeControllerGetDropsRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/trade/drops/{steamId}`.replace(`{${"steamId"}}`, encodeURIComponent(String(requestParameters.steamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    tradeControllerGetDrops = async (steamId: string): Promise<Array<TradeBotDroppedItemDto>> => {
        const response = await this.tradeControllerGetDropsRaw({ steamId: steamId });
        return await response.value();
    }

    /**
     */
    tradeControllerUpdateTierContext(requestParameters: TradeControllerUpdateTierRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/trade/tiers/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TradeBotUpdateDropTierDtoToJSON(requestParameters.tradeBotUpdateDropTierDto),
        };
    }

    /**
     */
    tradeControllerUpdateTier = async (id: number, tradeBotUpdateDropTierDto: TradeBotUpdateDropTierDto): Promise<void> => {
        await this.tradeControllerUpdateTierRaw({ id: id, tradeBotUpdateDropTierDto: tradeBotUpdateDropTierDto });
    }

    /**
     */
    private tradeControllerClaimDropsValidation(requestParameters: TradeControllerClaimDropsRequest) {
        if (requestParameters.steamId === null || requestParameters.steamId === undefined) {
            throw new runtime.RequiredError('steamId','Required parameter requestParameters.steamId was null or undefined when calling tradeControllerClaimDrops.');
        }
    }

    /**
     */
    tradeControllerGetOfferHistory = async (steamId: string): Promise<Array<TradeBotTradeOfferDto>> => {
        const response = await this.tradeControllerGetOfferHistoryRaw({ steamId: steamId });
        return await response.value();
    }

    /**
     */
    private async tradeControllerCreateDropTierRaw(requestParameters: TradeControllerCreateDropTierRequest): Promise<runtime.ApiResponse<void>> {
        this.tradeControllerCreateDropTierValidation(requestParameters);
        const context = this.tradeControllerCreateDropTierContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    private tradeControllerCreateDropTierValidation(requestParameters: TradeControllerCreateDropTierRequest) {
        if (requestParameters.tradeBotCreateDropTierDto === null || requestParameters.tradeBotCreateDropTierDto === undefined) {
            throw new runtime.RequiredError('tradeBotCreateDropTierDto','Required parameter requestParameters.tradeBotCreateDropTierDto was null or undefined when calling tradeControllerCreateDropTier.');
        }
    }

    /**
     */
    private async tradeControllerDeleteTierRaw(requestParameters: TradeControllerDeleteTierRequest): Promise<runtime.ApiResponse<void>> {
        this.tradeControllerDeleteTierValidation(requestParameters);
        const context = this.tradeControllerDeleteTierContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    private tradeControllerDeleteTierValidation(requestParameters: TradeControllerDeleteTierRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tradeControllerDeleteTier.');
        }
    }

    /**
     */
    private async tradeControllerGetUserRaw(requestParameters: TradeControllerGetUserRequest): Promise<runtime.ApiResponse<TradeBotUserDto>> {
        this.tradeControllerGetUserValidation(requestParameters);
        const context = this.tradeControllerGetUserContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => TradeBotUserDtoFromJSON(jsonValue));
    }



    /**
     */
    private tradeControllerGetUserValidation(requestParameters: TradeControllerGetUserRequest) {
        if (requestParameters.steamId === null || requestParameters.steamId === undefined) {
            throw new runtime.RequiredError('steamId','Required parameter requestParameters.steamId was null or undefined when calling tradeControllerGetUser.');
        }
    }

    /**
     */
    tradeControllerGetUserContext(requestParameters: TradeControllerGetUserRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/trade/user/{steamId}`.replace(`{${"steamId"}}`, encodeURIComponent(String(requestParameters.steamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    tradeControllerGetUser = async (steamId: string): Promise<TradeBotUserDto> => {
        const response = await this.tradeControllerGetUserRaw({ steamId: steamId });
        return await response.value();
    }

    /**
     */
    private async tradeControllerPurchaseRaw(requestParameters: TradeControllerPurchaseRequest): Promise<runtime.ApiResponse<void>> {
        this.tradeControllerPurchaseValidation(requestParameters);
        const context = this.tradeControllerPurchaseContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }



    /**
     */
    private tradeControllerPurchaseValidation(requestParameters: TradeControllerPurchaseRequest) {
        if (requestParameters.steamId === null || requestParameters.steamId === undefined) {
            throw new runtime.RequiredError('steamId','Required parameter requestParameters.steamId was null or undefined when calling tradeControllerPurchase.');
        }
        if (requestParameters.tradeBotPurchaseDto === null || requestParameters.tradeBotPurchaseDto === undefined) {
            throw new runtime.RequiredError('tradeBotPurchaseDto','Required parameter requestParameters.tradeBotPurchaseDto was null or undefined when calling tradeControllerPurchase.');
        }
    }

    /**
     */
    private async tradeControllerGetDropTiersRaw(): Promise<runtime.ApiResponse<Array<TradeBotDropTierDto>>> {
        this.tradeControllerGetDropTiersValidation();
        const context = this.tradeControllerGetDropTiersContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradeBotDropTierDtoFromJSON));
    }

    /**
     */
    private tradeControllerGetDropTiersValidation() {
    }

    /**
     */
    private async tradeControllerGetOfferHistoryRaw(requestParameters: TradeControllerGetOfferHistoryRequest): Promise<runtime.ApiResponse<Array<TradeBotTradeOfferDto>>> {
        this.tradeControllerGetOfferHistoryValidation(requestParameters);
        const context = this.tradeControllerGetOfferHistoryContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradeBotTradeOfferDtoFromJSON));
    }

    /**
     */
    private tradeControllerGetOfferHistoryValidation(requestParameters: TradeControllerGetOfferHistoryRequest) {
        if (requestParameters.steamId === null || requestParameters.steamId === undefined) {
            throw new runtime.RequiredError('steamId','Required parameter requestParameters.steamId was null or undefined when calling tradeControllerGetOfferHistory.');
        }
    }

    /**
     */
    private async tradeControllerGetSettingsRaw(): Promise<runtime.ApiResponse<TradeBotDropSettingsDto>> {
        this.tradeControllerGetSettingsValidation();
        const context = this.tradeControllerGetSettingsContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => TradeBotDropSettingsDtoFromJSON(jsonValue));
    }

    /**
     */
    private tradeControllerGetSettingsValidation() {
    }

    /**
     */
    private async tradeControllerUpdateSettingsRaw(requestParameters: TradeControllerUpdateSettingsRequest): Promise<runtime.ApiResponse<void>> {
        this.tradeControllerUpdateSettingsValidation(requestParameters);
        const context = this.tradeControllerUpdateSettingsContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    private tradeControllerUpdateSettingsValidation(requestParameters: TradeControllerUpdateSettingsRequest) {
        if (requestParameters.tradeBotUpdateDropSettingsDto === null || requestParameters.tradeBotUpdateDropSettingsDto === undefined) {
            throw new runtime.RequiredError('tradeBotUpdateDropSettingsDto','Required parameter requestParameters.tradeBotUpdateDropSettingsDto was null or undefined when calling tradeControllerUpdateSettings.');
        }
    }

    /**
     */
    private async tradeControllerUpdateTierRaw(requestParameters: TradeControllerUpdateTierRequest): Promise<runtime.ApiResponse<void>> {
        this.tradeControllerUpdateTierValidation(requestParameters);
        const context = this.tradeControllerUpdateTierContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    private tradeControllerUpdateTierValidation(requestParameters: TradeControllerUpdateTierRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling tradeControllerUpdateTier.');
        }
        if (requestParameters.tradeBotUpdateDropTierDto === null || requestParameters.tradeBotUpdateDropTierDto === undefined) {
            throw new runtime.RequiredError('tradeBotUpdateDropTierDto','Required parameter requestParameters.tradeBotUpdateDropTierDto was null or undefined when calling tradeControllerUpdateTier.');
        }
    }

    /**
     */
    private async tradeControllerUpdateUserRaw(requestParameters: TradeControllerUpdateUserRequest): Promise<runtime.ApiResponse<TradeBotUserDto>> {
        this.tradeControllerUpdateUserValidation(requestParameters);
        const context = this.tradeControllerUpdateUserContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => TradeBotUserDtoFromJSON(jsonValue));
    }



    /**
     */
    private tradeControllerUpdateUserValidation(requestParameters: TradeControllerUpdateUserRequest) {
        if (requestParameters.steamId === null || requestParameters.steamId === undefined) {
            throw new runtime.RequiredError('steamId','Required parameter requestParameters.steamId was null or undefined when calling tradeControllerUpdateUser.');
        }
        if (requestParameters.tradeBotUpdateUserDto === null || requestParameters.tradeBotUpdateUserDto === undefined) {
            throw new runtime.RequiredError('tradeBotUpdateUserDto','Required parameter requestParameters.tradeBotUpdateUserDto was null or undefined when calling tradeControllerUpdateUser.');
        }
    }

    /**
     */
    tradeControllerUpdateUserContext(requestParameters: TradeControllerUpdateUserRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/trade/user/{steamId}`.replace(`{${"steamId"}}`, encodeURIComponent(String(requestParameters.steamId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TradeBotUpdateUserDtoToJSON(requestParameters.tradeBotUpdateUserDto),
        };
    }

    /**
     */
    tradeControllerUpdateUser = async (steamId: string, tradeBotUpdateUserDto: TradeBotUpdateUserDto): Promise<TradeBotUserDto> => {
        const response = await this.tradeControllerUpdateUserRaw({ steamId: steamId, tradeBotUpdateUserDto: tradeBotUpdateUserDto });
        return await response.value();
    }

}
