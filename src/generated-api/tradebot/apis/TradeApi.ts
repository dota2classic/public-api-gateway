/* tslint:disable */
/* eslint-disable */
/**
 * GameServer api
 * Matches, players, mmrs
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";

import {
  TradeBotDroppedItemDto,
  TradeBotDroppedItemDtoFromJSON,
  TradeBotUpdateUserDto,
  TradeBotUpdateUserDtoToJSON,
  TradeBotUserDto,
  TradeBotUserDtoFromJSON,
} from "../models";

export interface TradeControllerClaimDropsRequest {
  steamId: string;
}

export interface TradeControllerDiscardDropRequest {
    steamId: string;
    assetId: string;
}

export interface TradeControllerGetDropsRequest {
    steamId: string;
}

export interface TradeControllerGetUserRequest {
    steamId: string;
}

export interface TradeControllerUpdateUserRequest {
    steamId: string;
    tradeBotUpdateUserDto: TradeBotUpdateUserDto;
}

/**
 *
 */
export class TradeApi extends runtime.BaseAPI {

    /**
     */
    tradeControllerClaimDropsContext(requestParameters: TradeControllerClaimDropsRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/trade/drops/{steamId}/claim`.replace(`{${"steamId"}}`, encodeURIComponent(String(requestParameters.steamId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    tradeControllerClaimDrops = async (steamId: string): Promise<void> => {
        await this.tradeControllerClaimDropsRaw({ steamId: steamId });
    }

    /**
     */
    tradeControllerDiscardDropContext(requestParameters: TradeControllerDiscardDropRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/trade/drops/{steamId}/discard/{assetId}`.replace(`{${"steamId"}}`, encodeURIComponent(String(requestParameters.steamId))).replace(`{${"assetId"}}`, encodeURIComponent(String(requestParameters.assetId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    tradeControllerDiscardDrop = async (steamId: string, assetId: string): Promise<void> => {
        await this.tradeControllerDiscardDropRaw({ steamId: steamId, assetId: assetId });
    }

    /**
     */
    tradeControllerGetDropsContext(requestParameters: TradeControllerGetDropsRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/trade/drops/{steamId}`.replace(`{${"steamId"}}`, encodeURIComponent(String(requestParameters.steamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    tradeControllerGetDrops = async (steamId: string): Promise<Array<TradeBotDroppedItemDto>> => {
        const response = await this.tradeControllerGetDropsRaw({ steamId: steamId });
        return await response.value();
    }

    /**
     */
    tradeControllerGetUserContext(requestParameters: TradeControllerGetUserRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/trade/user/{steamId}`.replace(`{${"steamId"}}`, encodeURIComponent(String(requestParameters.steamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    tradeControllerGetUser = async (steamId: string): Promise<TradeBotUserDto> => {
        const response = await this.tradeControllerGetUserRaw({ steamId: steamId });
        return await response.value();
    }

    /**
     */
    tradeControllerUpdateUserContext(requestParameters: TradeControllerUpdateUserRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/trade/user/{steamId}`.replace(`{${"steamId"}}`, encodeURIComponent(String(requestParameters.steamId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: TradeBotUpdateUserDtoToJSON(requestParameters.tradeBotUpdateUserDto),
        };
    }

    /**
     */
    tradeControllerUpdateUser = async (steamId: string, tradeBotUpdateUserDto: TradeBotUpdateUserDto): Promise<TradeBotUserDto> => {
        const response = await this.tradeControllerUpdateUserRaw({ steamId: steamId, tradeBotUpdateUserDto: tradeBotUpdateUserDto });
        return await response.value();
    }

    /**
     */
    private async tradeControllerClaimDropsRaw(requestParameters: TradeControllerClaimDropsRequest): Promise<runtime.ApiResponse<void>> {
        this.tradeControllerClaimDropsValidation(requestParameters);
        const context = this.tradeControllerClaimDropsContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    private tradeControllerClaimDropsValidation(requestParameters: TradeControllerClaimDropsRequest) {
        if (requestParameters.steamId === null || requestParameters.steamId === undefined) {
            throw new runtime.RequiredError('steamId','Required parameter requestParameters.steamId was null or undefined when calling tradeControllerClaimDrops.');
        }
    }

    /**
     */
    private async tradeControllerDiscardDropRaw(requestParameters: TradeControllerDiscardDropRequest): Promise<runtime.ApiResponse<void>> {
        this.tradeControllerDiscardDropValidation(requestParameters);
        const context = this.tradeControllerDiscardDropContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    private tradeControllerDiscardDropValidation(requestParameters: TradeControllerDiscardDropRequest) {
        if (requestParameters.steamId === null || requestParameters.steamId === undefined) {
            throw new runtime.RequiredError('steamId','Required parameter requestParameters.steamId was null or undefined when calling tradeControllerDiscardDrop.');
        }
        if (requestParameters.assetId === null || requestParameters.assetId === undefined) {
            throw new runtime.RequiredError('assetId','Required parameter requestParameters.assetId was null or undefined when calling tradeControllerDiscardDrop.');
        }
    }

    /**
     */
    private async tradeControllerGetDropsRaw(requestParameters: TradeControllerGetDropsRequest): Promise<runtime.ApiResponse<Array<TradeBotDroppedItemDto>>> {
        this.tradeControllerGetDropsValidation(requestParameters);
        const context = this.tradeControllerGetDropsContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TradeBotDroppedItemDtoFromJSON));
    }

    /**
     */
    private tradeControllerGetDropsValidation(requestParameters: TradeControllerGetDropsRequest) {
        if (requestParameters.steamId === null || requestParameters.steamId === undefined) {
            throw new runtime.RequiredError('steamId','Required parameter requestParameters.steamId was null or undefined when calling tradeControllerGetDrops.');
        }
    }

    /**
     */
    private async tradeControllerGetUserRaw(requestParameters: TradeControllerGetUserRequest): Promise<runtime.ApiResponse<TradeBotUserDto>> {
        this.tradeControllerGetUserValidation(requestParameters);
        const context = this.tradeControllerGetUserContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => TradeBotUserDtoFromJSON(jsonValue));
    }

    /**
     */
    private tradeControllerGetUserValidation(requestParameters: TradeControllerGetUserRequest) {
        if (requestParameters.steamId === null || requestParameters.steamId === undefined) {
            throw new runtime.RequiredError('steamId','Required parameter requestParameters.steamId was null or undefined when calling tradeControllerGetUser.');
        }
    }

    /**
     */
    private async tradeControllerUpdateUserRaw(requestParameters: TradeControllerUpdateUserRequest): Promise<runtime.ApiResponse<TradeBotUserDto>> {
        this.tradeControllerUpdateUserValidation(requestParameters);
        const context = this.tradeControllerUpdateUserContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => TradeBotUserDtoFromJSON(jsonValue));
    }

    /**
     */
    private tradeControllerUpdateUserValidation(requestParameters: TradeControllerUpdateUserRequest) {
        if (requestParameters.steamId === null || requestParameters.steamId === undefined) {
            throw new runtime.RequiredError('steamId','Required parameter requestParameters.steamId was null or undefined when calling tradeControllerUpdateUser.');
        }
        if (requestParameters.tradeBotUpdateUserDto === null || requestParameters.tradeBotUpdateUserDto === undefined) {
            throw new runtime.RequiredError('tradeBotUpdateUserDto','Required parameter requestParameters.tradeBotUpdateUserDto was null or undefined when calling tradeControllerUpdateUser.');
        }
    }

}
