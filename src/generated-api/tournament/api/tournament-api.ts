// tslint:disable
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { TournamentCreateTournamentDto } from '../models';
// @ts-ignore
import { TournamentTournamentDto } from '../models';
/**
 * TournamentApi - axios parameter creator
 * @export
 */
export const TournamentApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TournamentCreateTournamentDto} tournamentCreateTournamentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentControllerCreateTournament: async (tournamentCreateTournamentDto: TournamentCreateTournamentDto, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tournamentCreateTournamentDto' is not null or undefined
            if (tournamentCreateTournamentDto === null || tournamentCreateTournamentDto === undefined) {
                throw new RequiredError('tournamentCreateTournamentDto','Required parameter tournamentCreateTournamentDto was null or undefined when calling tournamentControllerCreateTournament.');
            }
            const localVarPath = `/tournament/create`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof tournamentCreateTournamentDto !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(tournamentCreateTournamentDto !== undefined ? tournamentCreateTournamentDto : {}) : (tournamentCreateTournamentDto || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentControllerGetBracket: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentControllerGetBracket.');
            }
            const localVarPath = `/tournament/bracket/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentControllerGetTournament: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentControllerGetTournament.');
            }
            const localVarPath = `/tournament/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentControllerListTournaments: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/tournament/list`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} steamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentControllerRegisterPlayer: async (id: number, steamId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentControllerRegisterPlayer.');
            }
            // verify required parameter 'steamId' is not null or undefined
            if (steamId === null || steamId === undefined) {
                throw new RequiredError('steamId','Required parameter steamId was null or undefined when calling tournamentControllerRegisterPlayer.');
            }
            const localVarPath = `/tournament/{id}/join_tournament_solo/{steam_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"steam_id"}}`, encodeURIComponent(String(steamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentControllerRegisterTeam: async (id: number, teamId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling tournamentControllerRegisterTeam.');
            }
            // verify required parameter 'teamId' is not null or undefined
            if (teamId === null || teamId === undefined) {
                throw new RequiredError('teamId','Required parameter teamId was null or undefined when calling tournamentControllerRegisterTeam.');
            }
            const localVarPath = `/tournament/{id}/join_tournament_team/{team_id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)))
                .replace(`{${"team_id"}}`, encodeURIComponent(String(teamId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TournamentApi - functional programming interface
 * @export
 */
export const TournamentApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {TournamentCreateTournamentDto} tournamentCreateTournamentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentControllerCreateTournament(tournamentCreateTournamentDto: TournamentCreateTournamentDto, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TournamentTournamentDto>> {
            const localVarAxiosArgs = await TournamentApiAxiosParamCreator(configuration).tournamentControllerCreateTournament(tournamentCreateTournamentDto, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentControllerGetBracket(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await TournamentApiAxiosParamCreator(configuration).tournamentControllerGetBracket(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentControllerGetTournament(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TournamentTournamentDto>> {
            const localVarAxiosArgs = await TournamentApiAxiosParamCreator(configuration).tournamentControllerGetTournament(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentControllerListTournaments(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TournamentTournamentDto>>> {
            const localVarAxiosArgs = await TournamentApiAxiosParamCreator(configuration).tournamentControllerListTournaments(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {string} steamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentControllerRegisterPlayer(id: number, steamId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TournamentApiAxiosParamCreator(configuration).tournamentControllerRegisterPlayer(id, steamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tournamentControllerRegisterTeam(id: number, teamId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await TournamentApiAxiosParamCreator(configuration).tournamentControllerRegisterTeam(id, teamId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TournamentApi - factory interface
 * @export
 */
export const TournamentApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {TournamentCreateTournamentDto} tournamentCreateTournamentDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentControllerCreateTournament(tournamentCreateTournamentDto: TournamentCreateTournamentDto, options?: any): AxiosPromise<TournamentTournamentDto> {
            return TournamentApiFp(configuration).tournamentControllerCreateTournament(tournamentCreateTournamentDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentControllerGetBracket(id: number, options?: any): AxiosPromise<Array<object>> {
            return TournamentApiFp(configuration).tournamentControllerGetBracket(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentControllerGetTournament(id: number, options?: any): AxiosPromise<TournamentTournamentDto> {
            return TournamentApiFp(configuration).tournamentControllerGetTournament(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentControllerListTournaments(options?: any): AxiosPromise<Array<TournamentTournamentDto>> {
            return TournamentApiFp(configuration).tournamentControllerListTournaments(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {string} steamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentControllerRegisterPlayer(id: number, steamId: string, options?: any): AxiosPromise<void> {
            return TournamentApiFp(configuration).tournamentControllerRegisterPlayer(id, steamId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {number} teamId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tournamentControllerRegisterTeam(id: number, teamId: number, options?: any): AxiosPromise<void> {
            return TournamentApiFp(configuration).tournamentControllerRegisterTeam(id, teamId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TournamentApi - object-oriented interface
 * @export
 * @class TournamentApi
 * @extends {BaseAPI}
 */
export class TournamentApi extends BaseAPI {
    /**
     * 
     * @param {TournamentCreateTournamentDto} tournamentCreateTournamentDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentApi
     */
    public tournamentControllerCreateTournament(tournamentCreateTournamentDto: TournamentCreateTournamentDto, options?: any) {
        return TournamentApiFp(this.configuration).tournamentControllerCreateTournament(tournamentCreateTournamentDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentApi
     */
    public tournamentControllerGetBracket(id: number, options?: any) {
        return TournamentApiFp(this.configuration).tournamentControllerGetBracket(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentApi
     */
    public tournamentControllerGetTournament(id: number, options?: any) {
        return TournamentApiFp(this.configuration).tournamentControllerGetTournament(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentApi
     */
    public tournamentControllerListTournaments(options?: any) {
        return TournamentApiFp(this.configuration).tournamentControllerListTournaments(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {string} steamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentApi
     */
    public tournamentControllerRegisterPlayer(id: number, steamId: string, options?: any) {
        return TournamentApiFp(this.configuration).tournamentControllerRegisterPlayer(id, steamId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {number} teamId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TournamentApi
     */
    public tournamentControllerRegisterTeam(id: number, teamId: number, options?: any) {
        return TournamentApiFp(this.configuration).tournamentControllerRegisterTeam(id, teamId, options).then((request) => request(this.axios, this.basePath));
    }

}
