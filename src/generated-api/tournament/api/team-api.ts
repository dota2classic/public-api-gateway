// tslint:disable
/**
 * Public REST api for dota2classic
 * All stuff
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url';
import globalAxios, { AxiosInstance, AxiosPromise } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequestArgs, RequiredError } from '../base';
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
// @ts-ignore
import {
  TournamentCreateTeamDto,
  TournamentCreateTeamInviteDto,
  TournamentEditTeamDto,
  TournamentKickFromTeamDto,
  TournamentLeaveTeamDto,
  TournamentSubmitInvitationDto,
  TournamentTeamDto,
  TournamentTeamInvitationDto,
  TournamentTournamentDto,
} from '../models';

/**
 * TeamApi - axios parameter creator
 * @export
 */
export const TeamApiAxiosParamCreator = function (
  configuration?: Configuration,
) {
  return {
    /**
     *
     * @param {TournamentCreateTeamDto} tournamentCreateTeamDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerCreateTeam: async (
      tournamentCreateTeamDto: TournamentCreateTeamDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tournamentCreateTeamDto' is not null or undefined
      if (
        tournamentCreateTeamDto === null ||
        tournamentCreateTeamDto === undefined
      ) {
        throw new RequiredError(
          "tournamentCreateTeamDto",
          "Required parameter tournamentCreateTeamDto was null or undefined when calling teamControllerCreateTeam.",
        );
      }
      const localVarPath = `/team/create`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof tournamentCreateTeamDto !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            tournamentCreateTeamDto !== undefined
              ? tournamentCreateTeamDto
              : {},
          )
        : tournamentCreateTeamDto || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {TournamentEditTeamDto} tournamentEditTeamDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerEditTeam: async (
      id: string,
      tournamentEditTeamDto: TournamentEditTeamDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling teamControllerEditTeam.",
        );
      }
      // verify required parameter 'tournamentEditTeamDto' is not null or undefined
      if (
        tournamentEditTeamDto === null ||
        tournamentEditTeamDto === undefined
      ) {
        throw new RequiredError(
          "tournamentEditTeamDto",
          "Required parameter tournamentEditTeamDto was null or undefined when calling teamControllerEditTeam.",
        );
      }
      const localVarPath = `/team/edit/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof tournamentEditTeamDto !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            tournamentEditTeamDto !== undefined ? tournamentEditTeamDto : {},
          )
        : tournamentEditTeamDto || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerGetTeam: async (
      id: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling teamControllerGetTeam.",
        );
      }
      const localVarPath = `/team/view/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} steamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerGetTeamInvites: async (
      steamId: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'steamId' is not null or undefined
      if (steamId === null || steamId === undefined) {
        throw new RequiredError(
          "steamId",
          "Required parameter steamId was null or undefined when calling teamControllerGetTeamInvites.",
        );
      }
      const localVarPath = `/team/team_invites/{steamId}`.replace(
        `{${"steamId"}}`,
        encodeURIComponent(String(steamId)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerGetTeamOf: async (
      id: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling teamControllerGetTeamOf.",
        );
      }
      const localVarPath = `/team/team_of/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerGetTournaments: async (
      id: string,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling teamControllerGetTournaments.",
        );
      }
      const localVarPath = `/team/tournament_list/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {TournamentCreateTeamInviteDto} tournamentCreateTeamInviteDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerInviteToTeam: async (
      tournamentCreateTeamInviteDto: TournamentCreateTeamInviteDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tournamentCreateTeamInviteDto' is not null or undefined
      if (
        tournamentCreateTeamInviteDto === null ||
        tournamentCreateTeamInviteDto === undefined
      ) {
        throw new RequiredError(
          "tournamentCreateTeamInviteDto",
          "Required parameter tournamentCreateTeamInviteDto was null or undefined when calling teamControllerInviteToTeam.",
        );
      }
      const localVarPath = `/team/invite`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof tournamentCreateTeamInviteDto !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            tournamentCreateTeamInviteDto !== undefined
              ? tournamentCreateTeamInviteDto
              : {},
          )
        : tournamentCreateTeamInviteDto || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {TournamentKickFromTeamDto} tournamentKickFromTeamDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerKickFromTeam: async (
      tournamentKickFromTeamDto: TournamentKickFromTeamDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tournamentKickFromTeamDto' is not null or undefined
      if (
        tournamentKickFromTeamDto === null ||
        tournamentKickFromTeamDto === undefined
      ) {
        throw new RequiredError(
          "tournamentKickFromTeamDto",
          "Required parameter tournamentKickFromTeamDto was null or undefined when calling teamControllerKickFromTeam.",
        );
      }
      const localVarPath = `/team/kick_from_team`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof tournamentKickFromTeamDto !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            tournamentKickFromTeamDto !== undefined
              ? tournamentKickFromTeamDto
              : {},
          )
        : tournamentKickFromTeamDto || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {TournamentLeaveTeamDto} tournamentLeaveTeamDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerLeaveTeam: async (
      tournamentLeaveTeamDto: TournamentLeaveTeamDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'tournamentLeaveTeamDto' is not null or undefined
      if (
        tournamentLeaveTeamDto === null ||
        tournamentLeaveTeamDto === undefined
      ) {
        throw new RequiredError(
          "tournamentLeaveTeamDto",
          "Required parameter tournamentLeaveTeamDto was null or undefined when calling teamControllerLeaveTeam.",
        );
      }
      const localVarPath = `/team/leave_team`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof tournamentLeaveTeamDto !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            tournamentLeaveTeamDto !== undefined ? tournamentLeaveTeamDto : {},
          )
        : tournamentLeaveTeamDto || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerListTeams: async (
      options: any = {},
    ): Promise<RequestArgs> => {
      const localVarPath = `/team/list`;
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "GET",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
    /**
     *
     * @param {number} id
     * @param {TournamentSubmitInvitationDto} tournamentSubmitInvitationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerSubmitInvite: async (
      id: number,
      tournamentSubmitInvitationDto: TournamentSubmitInvitationDto,
      options: any = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'id' is not null or undefined
      if (id === null || id === undefined) {
        throw new RequiredError(
          "id",
          "Required parameter id was null or undefined when calling teamControllerSubmitInvite.",
        );
      }
      // verify required parameter 'tournamentSubmitInvitationDto' is not null or undefined
      if (
        tournamentSubmitInvitationDto === null ||
        tournamentSubmitInvitationDto === undefined
      ) {
        throw new RequiredError(
          "tournamentSubmitInvitationDto",
          "Required parameter tournamentSubmitInvitationDto was null or undefined when calling teamControllerSubmitInvite.",
        );
      }
      const localVarPath = `/team/submit_invite/{id}`.replace(
        `{${"id"}}`,
        encodeURIComponent(String(id)),
      );
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
      let baseOptions;
      if (configuration) {
        baseOptions = configuration.baseOptions;
      }
      const localVarRequestOptions = {
        method: "POST",
        ...baseOptions,
        ...options,
      };
      const localVarHeaderParameter = {} as any;
      const localVarQueryParameter = {} as any;

      localVarHeaderParameter["Content-Type"] = "application/json";

      localVarUrlObj.query = {
        ...localVarUrlObj.query,
        ...localVarQueryParameter,
        ...options.query,
      };
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search;
      let headersFromBaseOptions =
        baseOptions && baseOptions.headers ? baseOptions.headers : {};
      localVarRequestOptions.headers = {
        ...localVarHeaderParameter,
        ...headersFromBaseOptions,
        ...options.headers,
      };
      const needsSerialization =
        typeof tournamentSubmitInvitationDto !== "string" ||
        localVarRequestOptions.headers["Content-Type"] === "application/json";
      localVarRequestOptions.data = needsSerialization
        ? JSON.stringify(
            tournamentSubmitInvitationDto !== undefined
              ? tournamentSubmitInvitationDto
              : {},
          )
        : tournamentSubmitInvitationDto || "";

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      };
    },
  };
};

/**
 * TeamApi - functional programming interface
 * @export
 */
export const TeamApiFp = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {TournamentCreateTeamDto} tournamentCreateTeamDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async teamControllerCreateTeam(
      tournamentCreateTeamDto: TournamentCreateTeamDto,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TournamentTeamDto>
    > {
      const localVarAxiosArgs = await TeamApiAxiosParamCreator(
        configuration,
      ).teamControllerCreateTeam(tournamentCreateTeamDto, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} id
     * @param {TournamentEditTeamDto} tournamentEditTeamDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async teamControllerEditTeam(
      id: string,
      tournamentEditTeamDto: TournamentEditTeamDto,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TournamentTeamDto>
    > {
      const localVarAxiosArgs = await TeamApiAxiosParamCreator(
        configuration,
      ).teamControllerEditTeam(id, tournamentEditTeamDto, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async teamControllerGetTeam(
      id: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TournamentTeamDto>
    > {
      const localVarAxiosArgs = await TeamApiAxiosParamCreator(
        configuration,
      ).teamControllerGetTeam(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} steamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async teamControllerGetTeamInvites(
      steamId: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<TournamentTeamInvitationDto>>
    > {
      const localVarAxiosArgs = await TeamApiAxiosParamCreator(
        configuration,
      ).teamControllerGetTeamInvites(steamId, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async teamControllerGetTeamOf(
      id: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TournamentTeamDto>
    > {
      const localVarAxiosArgs = await TeamApiAxiosParamCreator(
        configuration,
      ).teamControllerGetTeamOf(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async teamControllerGetTournaments(
      id: string,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<TournamentTournamentDto>>
    > {
      const localVarAxiosArgs = await TeamApiAxiosParamCreator(
        configuration,
      ).teamControllerGetTournaments(id, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {TournamentCreateTeamInviteDto} tournamentCreateTeamInviteDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async teamControllerInviteToTeam(
      tournamentCreateTeamInviteDto: TournamentCreateTeamInviteDto,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TournamentTeamDto>
    > {
      const localVarAxiosArgs = await TeamApiAxiosParamCreator(
        configuration,
      ).teamControllerInviteToTeam(tournamentCreateTeamInviteDto, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {TournamentKickFromTeamDto} tournamentKickFromTeamDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async teamControllerKickFromTeam(
      tournamentKickFromTeamDto: TournamentKickFromTeamDto,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TournamentTeamDto>
    > {
      const localVarAxiosArgs = await TeamApiAxiosParamCreator(
        configuration,
      ).teamControllerKickFromTeam(tournamentKickFromTeamDto, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {TournamentLeaveTeamDto} tournamentLeaveTeamDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async teamControllerLeaveTeam(
      tournamentLeaveTeamDto: TournamentLeaveTeamDto,
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<TournamentTeamDto>
    > {
      const localVarAxiosArgs = await TeamApiAxiosParamCreator(
        configuration,
      ).teamControllerLeaveTeam(tournamentLeaveTeamDto, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async teamControllerListTeams(
      options?: any,
    ): Promise<
      (
        axios?: AxiosInstance,
        basePath?: string,
      ) => AxiosPromise<Array<TournamentTeamDto>>
    > {
      const localVarAxiosArgs = await TeamApiAxiosParamCreator(
        configuration,
      ).teamControllerListTeams(options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
    /**
     *
     * @param {number} id
     * @param {TournamentSubmitInvitationDto} tournamentSubmitInvitationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async teamControllerSubmitInvite(
      id: number,
      tournamentSubmitInvitationDto: TournamentSubmitInvitationDto,
      options?: any,
    ): Promise<
      (axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>
    > {
      const localVarAxiosArgs = await TeamApiAxiosParamCreator(
        configuration,
      ).teamControllerSubmitInvite(id, tournamentSubmitInvitationDto, options);
      return (
        axios: AxiosInstance = globalAxios,
        basePath: string = BASE_PATH,
      ) => {
        const axiosRequestArgs = {
          ...localVarAxiosArgs.options,
          url: basePath + localVarAxiosArgs.url,
        };
        return axios.request(axiosRequestArgs);
      };
    },
  };
};

/**
 * TeamApi - factory interface
 * @export
 */
export const TeamApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  return {
    /**
     *
     * @param {TournamentCreateTeamDto} tournamentCreateTeamDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerCreateTeam(
      tournamentCreateTeamDto: TournamentCreateTeamDto,
      options?: any,
    ): AxiosPromise<TournamentTeamDto> {
      return TeamApiFp(configuration)
        .teamControllerCreateTeam(tournamentCreateTeamDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {TournamentEditTeamDto} tournamentEditTeamDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerEditTeam(
      id: string,
      tournamentEditTeamDto: TournamentEditTeamDto,
      options?: any,
    ): AxiosPromise<TournamentTeamDto> {
      return TeamApiFp(configuration)
        .teamControllerEditTeam(id, tournamentEditTeamDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerGetTeam(
      id: string,
      options?: any,
    ): AxiosPromise<TournamentTeamDto> {
      return TeamApiFp(configuration)
        .teamControllerGetTeam(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} steamId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerGetTeamInvites(
      steamId: string,
      options?: any,
    ): AxiosPromise<Array<TournamentTeamInvitationDto>> {
      return TeamApiFp(configuration)
        .teamControllerGetTeamInvites(steamId, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerGetTeamOf(
      id: string,
      options?: any,
    ): AxiosPromise<TournamentTeamDto> {
      return TeamApiFp(configuration)
        .teamControllerGetTeamOf(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerGetTournaments(
      id: string,
      options?: any,
    ): AxiosPromise<Array<TournamentTournamentDto>> {
      return TeamApiFp(configuration)
        .teamControllerGetTournaments(id, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {TournamentCreateTeamInviteDto} tournamentCreateTeamInviteDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerInviteToTeam(
      tournamentCreateTeamInviteDto: TournamentCreateTeamInviteDto,
      options?: any,
    ): AxiosPromise<TournamentTeamDto> {
      return TeamApiFp(configuration)
        .teamControllerInviteToTeam(tournamentCreateTeamInviteDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {TournamentKickFromTeamDto} tournamentKickFromTeamDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerKickFromTeam(
      tournamentKickFromTeamDto: TournamentKickFromTeamDto,
      options?: any,
    ): AxiosPromise<TournamentTeamDto> {
      return TeamApiFp(configuration)
        .teamControllerKickFromTeam(tournamentKickFromTeamDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {TournamentLeaveTeamDto} tournamentLeaveTeamDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerLeaveTeam(
      tournamentLeaveTeamDto: TournamentLeaveTeamDto,
      options?: any,
    ): AxiosPromise<TournamentTeamDto> {
      return TeamApiFp(configuration)
        .teamControllerLeaveTeam(tournamentLeaveTeamDto, options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerListTeams(
      options?: any,
    ): AxiosPromise<Array<TournamentTeamDto>> {
      return TeamApiFp(configuration)
        .teamControllerListTeams(options)
        .then((request) => request(axios, basePath));
    },
    /**
     *
     * @param {number} id
     * @param {TournamentSubmitInvitationDto} tournamentSubmitInvitationDto
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    teamControllerSubmitInvite(
      id: number,
      tournamentSubmitInvitationDto: TournamentSubmitInvitationDto,
      options?: any,
    ): AxiosPromise<void> {
      return TeamApiFp(configuration)
        .teamControllerSubmitInvite(id, tournamentSubmitInvitationDto, options)
        .then((request) => request(axios, basePath));
    },
  };
};

/**
 * TeamApi - object-oriented interface
 * @export
 * @class TeamApi
 * @extends {BaseAPI}
 */
export class TeamApi extends BaseAPI {
  /**
   *
   * @param {TournamentCreateTeamDto} tournamentCreateTeamDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public teamControllerCreateTeam(
    tournamentCreateTeamDto: TournamentCreateTeamDto,
    options?: any,
  ) {
    return TeamApiFp(this.configuration)
      .teamControllerCreateTeam(tournamentCreateTeamDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {TournamentEditTeamDto} tournamentEditTeamDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public teamControllerEditTeam(
    id: string,
    tournamentEditTeamDto: TournamentEditTeamDto,
    options?: any,
  ) {
    return TeamApiFp(this.configuration)
      .teamControllerEditTeam(id, tournamentEditTeamDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public teamControllerGetTeam(id: string, options?: any) {
    return TeamApiFp(this.configuration)
      .teamControllerGetTeam(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} steamId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public teamControllerGetTeamInvites(steamId: string, options?: any) {
    return TeamApiFp(this.configuration)
      .teamControllerGetTeamInvites(steamId, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public teamControllerGetTeamOf(id: string, options?: any) {
    return TeamApiFp(this.configuration)
      .teamControllerGetTeamOf(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {string} id
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public teamControllerGetTournaments(id: string, options?: any) {
    return TeamApiFp(this.configuration)
      .teamControllerGetTournaments(id, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {TournamentCreateTeamInviteDto} tournamentCreateTeamInviteDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public teamControllerInviteToTeam(
    tournamentCreateTeamInviteDto: TournamentCreateTeamInviteDto,
    options?: any,
  ) {
    return TeamApiFp(this.configuration)
      .teamControllerInviteToTeam(tournamentCreateTeamInviteDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {TournamentKickFromTeamDto} tournamentKickFromTeamDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public teamControllerKickFromTeam(
    tournamentKickFromTeamDto: TournamentKickFromTeamDto,
    options?: any,
  ) {
    return TeamApiFp(this.configuration)
      .teamControllerKickFromTeam(tournamentKickFromTeamDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {TournamentLeaveTeamDto} tournamentLeaveTeamDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public teamControllerLeaveTeam(
    tournamentLeaveTeamDto: TournamentLeaveTeamDto,
    options?: any,
  ) {
    return TeamApiFp(this.configuration)
      .teamControllerLeaveTeam(tournamentLeaveTeamDto, options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public teamControllerListTeams(options?: any) {
    return TeamApiFp(this.configuration)
      .teamControllerListTeams(options)
      .then((request) => request(this.axios, this.basePath));
  }

  /**
   *
   * @param {number} id
   * @param {TournamentSubmitInvitationDto} tournamentSubmitInvitationDto
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TeamApi
   */
  public teamControllerSubmitInvite(
    id: number,
    tournamentSubmitInvitationDto: TournamentSubmitInvitationDto,
    options?: any,
  ) {
    return TeamApiFp(this.configuration)
      .teamControllerSubmitInvite(id, tournamentSubmitInvitationDto, options)
      .then((request) => request(this.axios, this.basePath));
  }
}
