/* tslint:disable */
/* eslint-disable */
/**
 * GameServer api
 * Matches, players, mmrs
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists } from '../runtime';
import {
  GameserverLeaderboardEntryDto,
  GameserverLeaderboardEntryDtoFromJSON,
  GameserverLeaderboardEntryDtoToJSON,
  GameserverMatchAccessLevel,
  GameserverMatchAccessLevelFromJSON,
  GameserverMatchAccessLevelToJSON,
  GameserverPlayerAspectCountDto,
  GameserverPlayerAspectCountDtoFromJSON,
  GameserverPlayerAspectCountDtoToJSON,
  GameserverPlayerGameSessionDto,
  GameserverPlayerGameSessionDtoFromJSON,
  GameserverPlayerGameSessionDtoToJSON,
  GameserverRecalibrationDto,
  GameserverRecalibrationDtoFromJSON,
  GameserverRecalibrationDtoToJSON,
} from './';

/**
 *
 * @export
 * @interface GameserverPlayerSummaryDto
 */
export class GameserverPlayerSummaryDto {
    /**
     *
     * @type {GameserverMatchAccessLevel}
     * @memberof GameserverPlayerSummaryDto
     */
    accessLevel: GameserverMatchAccessLevel;
    /**
     *
     * @type {string}
     * @memberof GameserverPlayerSummaryDto
     */
    steamId: string;
    /**
     *
     * @type {GameserverLeaderboardEntryDto}
     * @memberof GameserverPlayerSummaryDto
     */
    season: GameserverLeaderboardEntryDto;
    /**
     *
     * @type {GameserverLeaderboardEntryDto}
     * @memberof GameserverPlayerSummaryDto
     */
    overall: GameserverLeaderboardEntryDto;
    /**
     *
     * @type {GameserverRecalibrationDto}
     * @memberof GameserverPlayerSummaryDto
     */
    recalibration?: GameserverRecalibrationDto;
    /**
     *
     * @type {GameserverPlayerGameSessionDto}
     * @memberof GameserverPlayerSummaryDto
     */
    session?: GameserverPlayerGameSessionDto;
    /**
     *
     * @type {number}
     * @memberof GameserverPlayerSummaryDto
     */
    calibrationGamesLeft: number;
    /**
     *
     * @type {Array<GameserverPlayerAspectCountDto>}
     * @memberof GameserverPlayerSummaryDto
     */
    reports: Array<GameserverPlayerAspectCountDto>;
}

export function GameserverPlayerSummaryDtoFromJSON(json: any): GameserverPlayerSummaryDto {
    return GameserverPlayerSummaryDtoFromJSONTyped(json, false);
}

export function GameserverPlayerSummaryDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): GameserverPlayerSummaryDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {

        'accessLevel': GameserverMatchAccessLevelFromJSON(json['accessLevel']),
        'steamId': json['steamId'],
        'season': GameserverLeaderboardEntryDtoFromJSON(json['season']),
        'overall': GameserverLeaderboardEntryDtoFromJSON(json['overall']),
        'recalibration': !exists(json, 'recalibration') ? undefined : GameserverRecalibrationDtoFromJSON(json['recalibration']),
        'session': !exists(json, 'session') ? undefined : GameserverPlayerGameSessionDtoFromJSON(json['session']),
        'calibrationGamesLeft': json['calibrationGamesLeft'],
        'reports': ((json['reports'] as Array<any>).map(GameserverPlayerAspectCountDtoFromJSON)),
    };
}

export function GameserverPlayerSummaryDtoToJSON(value?: GameserverPlayerSummaryDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {

        'accessLevel': GameserverMatchAccessLevelToJSON(value.accessLevel),
        'steamId': value.steamId,
        'season': GameserverLeaderboardEntryDtoToJSON(value.season),
        'overall': GameserverLeaderboardEntryDtoToJSON(value.overall),
        'recalibration': GameserverRecalibrationDtoToJSON(value.recalibration),
        'session': GameserverPlayerGameSessionDtoToJSON(value.session),
        'calibrationGamesLeft': value.calibrationGamesLeft,
        'reports': ((value.reports as Array<any>).map(GameserverPlayerAspectCountDtoToJSON)),
    };
}


