/* tslint:disable */
/* eslint-disable */
/**
 * GameServer api
 * Matches, players, mmrs
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

import {
    GameserverGameSeasonDto,
    GameserverGameSeasonDtoFromJSON,
    GameserverGameSeasonDtoToJSON,
    GameserverGameServerDto,
    GameserverGameServerDtoFromJSON,
    GameserverGameServerDtoToJSON,
    GameserverGameSessionDto,
    GameserverGameSessionDtoFromJSON,
    GameserverGameSessionDtoToJSON,
    GameserverMatchmakingModeInfoDto,
    GameserverMatchmakingModeInfoDtoFromJSON,
    GameserverMatchmakingModeInfoDtoToJSON,
    GameserverUpdateGamemodeDto,
    GameserverUpdateGamemodeDtoFromJSON,
    GameserverUpdateGamemodeDtoToJSON,
} from '../models';

export interface InfoControllerUpdateGamemodeRequest {
    mode: number;
    gameserverUpdateGamemodeDto: GameserverUpdateGamemodeDto;
}

/**
 *
 */
export class InfoApi extends runtime.BaseAPI {

    /**
     */
    private async infoControllerGameServersRaw(): Promise<runtime.ApiResponse<Array<GameserverGameServerDto>>> {
        this.infoControllerGameServersValidation();
        const context = this.infoControllerGameServersContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameserverGameServerDtoFromJSON));
    }



    /**
     */
    private infoControllerGameServersValidation() {
    }

    /**
     */
    infoControllerGameServersContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/info/game_servers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    infoControllerGameServers = async (): Promise<Array<GameserverGameServerDto>> => {
        const response = await this.infoControllerGameServersRaw();
        return await response.value();
    }

    /**
     */
    private async infoControllerGameSessionsRaw(): Promise<runtime.ApiResponse<Array<GameserverGameSessionDto>>> {
        this.infoControllerGameSessionsValidation();
        const context = this.infoControllerGameSessionsContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameserverGameSessionDtoFromJSON));
    }



    /**
     */
    private infoControllerGameSessionsValidation() {
    }

    /**
     */
    infoControllerGameSessionsContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/info/game_sessions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    infoControllerGameSessions = async (): Promise<Array<GameserverGameSessionDto>> => {
        const response = await this.infoControllerGameSessionsRaw();
        return await response.value();
    }

    /**
     */
    infoControllerGetSeasonsContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/info/seasons`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    infoControllerGetSeasons = async (): Promise<Array<GameserverGameSeasonDto>> => {
        const response = await this.infoControllerGetSeasonsRaw();
        return await response.value();
    }

    /**
     */
    infoControllerGamemodesContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/info/gamemode`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    infoControllerGamemodes = async (): Promise<Array<GameserverMatchmakingModeInfoDto>> => {
        const response = await this.infoControllerGamemodesRaw();
        return await response.value();
    }

    /**
     */
    private async infoControllerGetCurrentOnlineRaw(): Promise<runtime.ApiResponse<number>> {
        this.infoControllerGetCurrentOnlineValidation();
        const context = this.infoControllerGetCurrentOnlineContext();
        const response = await this.request(context);

        return new runtime.TextApiResponse(response) as any;
    }



    /**
     */
    private infoControllerGetCurrentOnlineValidation() {
    }

    /**
     */
    infoControllerGetCurrentOnlineContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/info/current_online`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    infoControllerGetCurrentOnline = async (): Promise<number> => {
        const response = await this.infoControllerGetCurrentOnlineRaw();
        return await response.value();
    }

    /**
     */
    infoControllerUpdateGamemodeContext(requestParameters: InfoControllerUpdateGamemodeRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/info/gamemode/{mode}`.replace(`{${"mode"}}`, encodeURIComponent(String(requestParameters.mode))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GameserverUpdateGamemodeDtoToJSON(requestParameters.gameserverUpdateGamemodeDto),
        };
    }

    /**
     */
    infoControllerUpdateGamemode = async (mode: number, gameserverUpdateGamemodeDto: GameserverUpdateGamemodeDto): Promise<void> => {
        await this.infoControllerUpdateGamemodeRaw({ mode: mode, gameserverUpdateGamemodeDto: gameserverUpdateGamemodeDto });
    }

    /**
     */
    private async infoControllerGamemodesRaw(): Promise<runtime.ApiResponse<Array<GameserverMatchmakingModeInfoDto>>> {
        this.infoControllerGamemodesValidation();
        const context = this.infoControllerGamemodesContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameserverMatchmakingModeInfoDtoFromJSON));
    }

    /**
     */
    private infoControllerGamemodesValidation() {
    }

    /**
     */
    private async infoControllerUpdateGamemodeRaw(requestParameters: InfoControllerUpdateGamemodeRequest): Promise<runtime.ApiResponse<void>> {
        this.infoControllerUpdateGamemodeValidation(requestParameters);
        const context = this.infoControllerUpdateGamemodeContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }



    /**
     */
    private infoControllerUpdateGamemodeValidation(requestParameters: InfoControllerUpdateGamemodeRequest) {
        if (requestParameters.mode === null || requestParameters.mode === undefined) {
            throw new runtime.RequiredError('mode','Required parameter requestParameters.mode was null or undefined when calling infoControllerUpdateGamemode.');
        }
        if (requestParameters.gameserverUpdateGamemodeDto === null || requestParameters.gameserverUpdateGamemodeDto === undefined) {
            throw new runtime.RequiredError('gameserverUpdateGamemodeDto','Required parameter requestParameters.gameserverUpdateGamemodeDto was null or undefined when calling infoControllerUpdateGamemode.');
        }
    }

    /**
     */
    private async infoControllerGetSeasonsRaw(): Promise<runtime.ApiResponse<Array<GameserverGameSeasonDto>>> {
        this.infoControllerGetSeasonsValidation();
        const context = this.infoControllerGetSeasonsContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameserverGameSeasonDtoFromJSON));
    }

    /**
     */
    private infoControllerGetSeasonsValidation() {
    }

}
