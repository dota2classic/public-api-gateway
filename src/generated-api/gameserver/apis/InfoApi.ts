/* tslint:disable */
/* eslint-disable */
/**
 * GameServer api
 * Matches, players, mmrs
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

import {
    GameserverGameServerDto,
    GameserverGameServerDtoFromJSON,
    GameserverGameSessionDto,
    GameserverGameSessionDtoFromJSON,
} from '../models';

/**
 *
 */
export class InfoApi extends runtime.BaseAPI {

    /**
     */
    infoControllerGameServersContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/info/game_servers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    infoControllerGameServers = async (): Promise<Array<GameserverGameServerDto>> => {
        const response = await this.infoControllerGameServersRaw();
        return await response.value();
    }

    /**
     */
    infoControllerGameSessionsContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/info/game_sessions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    infoControllerGameSessions = async (): Promise<Array<GameserverGameSessionDto>> => {
        const response = await this.infoControllerGameSessionsRaw();
        return await response.value();
    }

    /**
     */
    infoControllerGetCurrentOnlineContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/info/current_online`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    infoControllerGetCurrentOnline = async (): Promise<number> => {
        const response = await this.infoControllerGetCurrentOnlineRaw();
        return await response.value();
    }

    /**
     */
    private async infoControllerGameServersRaw(): Promise<runtime.ApiResponse<Array<GameserverGameServerDto>>> {
        this.infoControllerGameServersValidation();
        const context = this.infoControllerGameServersContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameserverGameServerDtoFromJSON));
    }

    /**
     */
    private infoControllerGameServersValidation() {
    }

    /**
     */
    private async infoControllerGameSessionsRaw(): Promise<runtime.ApiResponse<Array<GameserverGameSessionDto>>> {
        this.infoControllerGameSessionsValidation();
        const context = this.infoControllerGameSessionsContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameserverGameSessionDtoFromJSON));
    }

    /**
     */
    private infoControllerGameSessionsValidation() {
    }

    /**
     */
    private async infoControllerGetCurrentOnlineRaw(): Promise<runtime.ApiResponse<number>> {
        this.infoControllerGetCurrentOnlineValidation();
        const context = this.infoControllerGetCurrentOnlineContext();
        const response = await this.request(context);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     */
    private infoControllerGetCurrentOnlineValidation() {
    }

}
