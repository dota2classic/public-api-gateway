/* tslint:disable */
/* eslint-disable */
/**
 * GameServer api
 * Matches, players, mmrs
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";

import {
  GameserverAbandonSessionDto,
  GameserverAbandonSessionDtoToJSON,
  GameserverAchievementDto,
  GameserverAchievementDtoFromJSON,
  GameserverBanStatusDto,
  GameserverBanStatusDtoFromJSON,
  GameserverDodgeListEntryDto,
  GameserverDodgeListEntryDtoFromJSON,
  GameserverDodgePlayerDto,
  GameserverDodgePlayerDtoToJSON,
  GameserverHeroStatsDto,
  GameserverHeroStatsDtoFromJSON,
  GameserverLeaderboardEntryPageDto,
  GameserverLeaderboardEntryPageDtoFromJSON,
  GameserverPlayerHeroPerformance,
  GameserverPlayerHeroPerformanceFromJSON,
  GameserverPlayerSummaryDto,
  GameserverPlayerSummaryDtoFromJSON,
  GameserverPlayerTeammatePage,
  GameserverPlayerTeammatePageFromJSON,
  GameserverReportPlayerDto,
  GameserverReportPlayerDtoToJSON,
  GameserverReportsAvailableDto,
  GameserverReportsAvailableDtoFromJSON,
  GameserverSmurfData,
  GameserverSmurfDataFromJSON,
  GameserverStartRecalibrationDto,
  GameserverStartRecalibrationDtoToJSON,
} from "../models";

export interface PlayerControllerAbandonSessionRequest {
  gameserverAbandonSessionDto: GameserverAbandonSessionDto;
}

export interface PlayerControllerBanInfoRequest {
    id: string;
}

export interface PlayerControllerDodgePlayerRequest {
    gameserverDodgePlayerDto: GameserverDodgePlayerDto;
}

export interface PlayerControllerGetDodgeListRequest {
    steamId: string;
}

export interface PlayerControllerGetHeroPlayersRequest {
    hero: string;
}

export interface PlayerControllerLeaderboardRequest {
    page: number;
    perPage?: number;
    seasonId?: number;
}

export interface PlayerControllerPlayerAchievementsRequest {
    id: string;
}

export interface PlayerControllerPlayerHeroSummaryRequest {
    id: string;
}

export interface PlayerControllerPlayerSummaryRequest {
    id: string;
}

export interface PlayerControllerPlayerTeammatesRequest {
    id: string;
    page: number;
    perPage?: number;
}

export interface PlayerControllerReportPlayerRequest {
    gameserverReportPlayerDto: GameserverReportPlayerDto;
}

export interface PlayerControllerReportsAvailableRequest {
    id: string;
}

export interface PlayerControllerSmurfDataRequest {
    id: string;
}

export interface PlayerControllerStartRecalibrationRequest {
    gameserverStartRecalibrationDto: GameserverStartRecalibrationDto;
}

export interface PlayerControllerUnDodgePlayerRequest {
    gameserverDodgePlayerDto: GameserverDodgePlayerDto;
}

/**
 *
 */
export class PlayerApi extends runtime.BaseAPI {

    /**
     */
    playerControllerDodgePlayerContext(requestParameters: PlayerControllerDodgePlayerRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/player/dodge_list`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameserverDodgePlayerDtoToJSON(requestParameters.gameserverDodgePlayerDto),
        };
    }

    /**
     */
    playerControllerDodgePlayer = async (gameserverDodgePlayerDto: GameserverDodgePlayerDto): Promise<Array<GameserverDodgeListEntryDto>> => {
        const response = await this.playerControllerDodgePlayerRaw({ gameserverDodgePlayerDto: gameserverDodgePlayerDto });
        return await response.value();
    }

    /**
     */
    playerControllerAbandonSessionContext(requestParameters: PlayerControllerAbandonSessionRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/player/abandon`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameserverAbandonSessionDtoToJSON(requestParameters.gameserverAbandonSessionDto),
        };
    }

    /**
     */
    playerControllerAbandonSession = async (gameserverAbandonSessionDto: GameserverAbandonSessionDto): Promise<void> => {
        await this.playerControllerAbandonSessionRaw({ gameserverAbandonSessionDto: gameserverAbandonSessionDto });
    }

    /**
     */
    private async playerControllerBanInfoRaw(requestParameters: PlayerControllerBanInfoRequest): Promise<runtime.ApiResponse<GameserverBanStatusDto>> {
        this.playerControllerBanInfoValidation(requestParameters);
        const context = this.playerControllerBanInfoContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameserverBanStatusDtoFromJSON(jsonValue));
    }



    /**
     */
    private playerControllerBanInfoValidation(requestParameters: PlayerControllerBanInfoRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playerControllerBanInfo.');
        }
    }

    /**
     */
    playerControllerBanInfoContext(requestParameters: PlayerControllerBanInfoRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/player/ban_info/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerBanInfo = async (id: string): Promise<GameserverBanStatusDto> => {
        const response = await this.playerControllerBanInfoRaw({ id: id });
        return await response.value();
    }

    /**
     */
    playerControllerGetDodgeListContext(requestParameters: PlayerControllerGetDodgeListRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.steamId !== undefined) {
            queryParameters['steamId'] = requestParameters.steamId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/player/dodge_list`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerGetDodgeList = async (steamId: string): Promise<Array<GameserverDodgeListEntryDto>> => {
        const response = await this.playerControllerGetDodgeListRaw({ steamId: steamId });
        return await response.value();
    }

    /**
     */
    playerControllerReportPlayer = async (gameserverReportPlayerDto: GameserverReportPlayerDto): Promise<void> => {
        await this.playerControllerReportPlayerRaw({ gameserverReportPlayerDto: gameserverReportPlayerDto });
    }

    /**
     */
    playerControllerReportsAvailableContext(requestParameters: PlayerControllerReportsAvailableRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/player/reports/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerReportsAvailable = async (id: string): Promise<GameserverReportsAvailableDto> => {
        const response = await this.playerControllerReportsAvailableRaw({ id: id });
        return await response.value();
    }

    /**
     */
    playerControllerSmurfDataContext(requestParameters: PlayerControllerSmurfDataRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/player/smurf_data/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerSmurfData = async (id: string): Promise<GameserverSmurfData> => {
        const response = await this.playerControllerSmurfDataRaw({ id: id });
        return await response.value();
    }

    /**
     */
    playerControllerStartRecalibrationContext(requestParameters: PlayerControllerStartRecalibrationRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/player/start_recalibration`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameserverStartRecalibrationDtoToJSON(requestParameters.gameserverStartRecalibrationDto),
        };
    }

    /**
     */
    private async playerControllerGetHeroPlayersRaw(requestParameters: PlayerControllerGetHeroPlayersRequest): Promise<runtime.ApiResponse<Array<GameserverPlayerHeroPerformance>>> {
        this.playerControllerGetHeroPlayersValidation(requestParameters);
        const context = this.playerControllerGetHeroPlayersContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameserverPlayerHeroPerformanceFromJSON));
    }



    /**
     */
    private playerControllerGetHeroPlayersValidation(requestParameters: PlayerControllerGetHeroPlayersRequest) {
        if (requestParameters.hero === null || requestParameters.hero === undefined) {
            throw new runtime.RequiredError('hero','Required parameter requestParameters.hero was null or undefined when calling playerControllerGetHeroPlayers.');
        }
    }

    /**
     */
    playerControllerGetHeroPlayersContext(requestParameters: PlayerControllerGetHeroPlayersRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/player/hero/{hero}/players`.replace(`{${"hero"}}`, encodeURIComponent(String(requestParameters.hero))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerGetHeroPlayers = async (hero: string): Promise<Array<GameserverPlayerHeroPerformance>> => {
        const response = await this.playerControllerGetHeroPlayersRaw({ hero: hero });
        return await response.value();
    }

    /**
     */
    private async playerControllerLeaderboardRaw(requestParameters: PlayerControllerLeaderboardRequest): Promise<runtime.ApiResponse<GameserverLeaderboardEntryPageDto>> {
        this.playerControllerLeaderboardValidation(requestParameters);
        const context = this.playerControllerLeaderboardContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameserverLeaderboardEntryPageDtoFromJSON(jsonValue));
    }



    /**
     */
    private playerControllerLeaderboardValidation(requestParameters: PlayerControllerLeaderboardRequest) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling playerControllerLeaderboard.');
        }
    }

    /**
     */
    playerControllerLeaderboardContext(requestParameters: PlayerControllerLeaderboardRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        if (requestParameters.seasonId !== undefined) {
            queryParameters['season_id'] = requestParameters.seasonId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/player/leaderboard`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerLeaderboard = async (page: number, perPage?: number, seasonId?: number): Promise<GameserverLeaderboardEntryPageDto> => {
        const response = await this.playerControllerLeaderboardRaw({ page: page, perPage: perPage, seasonId: seasonId });
        return await response.value();
    }

    /**
     */
    private async playerControllerPlayerAchievementsRaw(requestParameters: PlayerControllerPlayerAchievementsRequest): Promise<runtime.ApiResponse<Array<GameserverAchievementDto>>> {
        this.playerControllerPlayerAchievementsValidation(requestParameters);
        const context = this.playerControllerPlayerAchievementsContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameserverAchievementDtoFromJSON));
    }



    /**
     */
    private playerControllerPlayerAchievementsValidation(requestParameters: PlayerControllerPlayerAchievementsRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playerControllerPlayerAchievements.');
        }
    }

    /**
     */
    playerControllerPlayerAchievementsContext(requestParameters: PlayerControllerPlayerAchievementsRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/player/{id}/achievements`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerPlayerAchievements = async (id: string): Promise<Array<GameserverAchievementDto>> => {
        const response = await this.playerControllerPlayerAchievementsRaw({ id: id });
        return await response.value();
    }

    /**
     */
    private async playerControllerPlayerHeroSummaryRaw(requestParameters: PlayerControllerPlayerHeroSummaryRequest): Promise<runtime.ApiResponse<Array<GameserverHeroStatsDto>>> {
        this.playerControllerPlayerHeroSummaryValidation(requestParameters);
        const context = this.playerControllerPlayerHeroSummaryContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameserverHeroStatsDtoFromJSON));
    }



    /**
     */
    private playerControllerPlayerHeroSummaryValidation(requestParameters: PlayerControllerPlayerHeroSummaryRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playerControllerPlayerHeroSummary.');
        }
    }

    /**
     */
    playerControllerPlayerHeroSummaryContext(requestParameters: PlayerControllerPlayerHeroSummaryRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/player/summary/heroes/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerPlayerHeroSummary = async (id: string): Promise<Array<GameserverHeroStatsDto>> => {
        const response = await this.playerControllerPlayerHeroSummaryRaw({ id: id });
        return await response.value();
    }

    /**
     */
    private async playerControllerPlayerSummaryRaw(requestParameters: PlayerControllerPlayerSummaryRequest): Promise<runtime.ApiResponse<GameserverPlayerSummaryDto>> {
        this.playerControllerPlayerSummaryValidation(requestParameters);
        const context = this.playerControllerPlayerSummaryContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameserverPlayerSummaryDtoFromJSON(jsonValue));
    }



    /**
     */
    private playerControllerPlayerSummaryValidation(requestParameters: PlayerControllerPlayerSummaryRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playerControllerPlayerSummary.');
        }
    }

    /**
     */
    playerControllerPlayerSummaryContext(requestParameters: PlayerControllerPlayerSummaryRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/player/summary/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerPlayerSummary = async (id: string): Promise<GameserverPlayerSummaryDto> => {
        const response = await this.playerControllerPlayerSummaryRaw({ id: id });
        return await response.value();
    }

    /**
     */
    private async playerControllerPlayerTeammatesRaw(requestParameters: PlayerControllerPlayerTeammatesRequest): Promise<runtime.ApiResponse<GameserverPlayerTeammatePage>> {
        this.playerControllerPlayerTeammatesValidation(requestParameters);
        const context = this.playerControllerPlayerTeammatesContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameserverPlayerTeammatePageFromJSON(jsonValue));
    }



    /**
     */
    private playerControllerPlayerTeammatesValidation(requestParameters: PlayerControllerPlayerTeammatesRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playerControllerPlayerTeammates.');
        }
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling playerControllerPlayerTeammates.');
        }
    }

    /**
     */
    playerControllerPlayerTeammatesContext(requestParameters: PlayerControllerPlayerTeammatesRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/player/{id}/teammates`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    playerControllerPlayerTeammates = async (id: string, page: number, perPage?: number): Promise<GameserverPlayerTeammatePage> => {
        const response = await this.playerControllerPlayerTeammatesRaw({ id: id, page: page, perPage: perPage });
        return await response.value();
    }

    /**
     */
    private async playerControllerReportPlayerRaw(requestParameters: PlayerControllerReportPlayerRequest): Promise<runtime.ApiResponse<void>> {
        this.playerControllerReportPlayerValidation(requestParameters);
        const context = this.playerControllerReportPlayerContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }



    /**
     */
    private playerControllerReportPlayerValidation(requestParameters: PlayerControllerReportPlayerRequest) {
        if (requestParameters.gameserverReportPlayerDto === null || requestParameters.gameserverReportPlayerDto === undefined) {
            throw new runtime.RequiredError('gameserverReportPlayerDto','Required parameter requestParameters.gameserverReportPlayerDto was null or undefined when calling playerControllerReportPlayer.');
        }
    }

    /**
     */
    playerControllerReportPlayerContext(requestParameters: PlayerControllerReportPlayerRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/player/report`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GameserverReportPlayerDtoToJSON(requestParameters.gameserverReportPlayerDto),
        };
    }

    /**
     */
    playerControllerStartRecalibration = async (gameserverStartRecalibrationDto: GameserverStartRecalibrationDto): Promise<void> => {
        await this.playerControllerStartRecalibrationRaw({ gameserverStartRecalibrationDto: gameserverStartRecalibrationDto });
    }

    /**
     */
    playerControllerUnDodgePlayerContext(requestParameters: PlayerControllerUnDodgePlayerRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        return {
            path: `/player/dodge_list`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
            body: GameserverDodgePlayerDtoToJSON(requestParameters.gameserverDodgePlayerDto),
        };
    }

    /**
     */
    playerControllerUnDodgePlayer = async (gameserverDodgePlayerDto: GameserverDodgePlayerDto): Promise<Array<GameserverDodgeListEntryDto>> => {
        const response = await this.playerControllerUnDodgePlayerRaw({ gameserverDodgePlayerDto: gameserverDodgePlayerDto });
        return await response.value();
    }

    /**
     */
    private async playerControllerAbandonSessionRaw(requestParameters: PlayerControllerAbandonSessionRequest): Promise<runtime.ApiResponse<void>> {
        this.playerControllerAbandonSessionValidation(requestParameters);
        const context = this.playerControllerAbandonSessionContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    private playerControllerAbandonSessionValidation(requestParameters: PlayerControllerAbandonSessionRequest) {
        if (requestParameters.gameserverAbandonSessionDto === null || requestParameters.gameserverAbandonSessionDto === undefined) {
            throw new runtime.RequiredError('gameserverAbandonSessionDto','Required parameter requestParameters.gameserverAbandonSessionDto was null or undefined when calling playerControllerAbandonSession.');
        }
    }

    /**
     */
    private async playerControllerSmurfDataRaw(requestParameters: PlayerControllerSmurfDataRequest): Promise<runtime.ApiResponse<GameserverSmurfData>> {
        this.playerControllerSmurfDataValidation(requestParameters);
        const context = this.playerControllerSmurfDataContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameserverSmurfDataFromJSON(jsonValue));
    }



    /**
     */
    private playerControllerSmurfDataValidation(requestParameters: PlayerControllerSmurfDataRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playerControllerSmurfData.');
        }
    }

    /**
     */
    private async playerControllerDodgePlayerRaw(requestParameters: PlayerControllerDodgePlayerRequest): Promise<runtime.ApiResponse<Array<GameserverDodgeListEntryDto>>> {
        this.playerControllerDodgePlayerValidation(requestParameters);
        const context = this.playerControllerDodgePlayerContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameserverDodgeListEntryDtoFromJSON));
    }

    /**
     */
    private playerControllerDodgePlayerValidation(requestParameters: PlayerControllerDodgePlayerRequest) {
        if (requestParameters.gameserverDodgePlayerDto === null || requestParameters.gameserverDodgePlayerDto === undefined) {
            throw new runtime.RequiredError('gameserverDodgePlayerDto','Required parameter requestParameters.gameserverDodgePlayerDto was null or undefined when calling playerControllerDodgePlayer.');
        }
    }

    /**
     */
    private async playerControllerGetDodgeListRaw(requestParameters: PlayerControllerGetDodgeListRequest): Promise<runtime.ApiResponse<Array<GameserverDodgeListEntryDto>>> {
        this.playerControllerGetDodgeListValidation(requestParameters);
        const context = this.playerControllerGetDodgeListContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameserverDodgeListEntryDtoFromJSON));
    }

    /**
     */
    private playerControllerGetDodgeListValidation(requestParameters: PlayerControllerGetDodgeListRequest) {
        if (requestParameters.steamId === null || requestParameters.steamId === undefined) {
            throw new runtime.RequiredError('steamId','Required parameter requestParameters.steamId was null or undefined when calling playerControllerGetDodgeList.');
        }
    }

    /**
     */
    private async playerControllerReportsAvailableRaw(requestParameters: PlayerControllerReportsAvailableRequest): Promise<runtime.ApiResponse<GameserverReportsAvailableDto>> {
        this.playerControllerReportsAvailableValidation(requestParameters);
        const context = this.playerControllerReportsAvailableContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameserverReportsAvailableDtoFromJSON(jsonValue));
    }

    /**
     */
    private playerControllerReportsAvailableValidation(requestParameters: PlayerControllerReportsAvailableRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling playerControllerReportsAvailable.');
        }
    }

    /**
     */
    private async playerControllerUnDodgePlayerRaw(requestParameters: PlayerControllerUnDodgePlayerRequest): Promise<runtime.ApiResponse<Array<GameserverDodgeListEntryDto>>> {
        this.playerControllerUnDodgePlayerValidation(requestParameters);
        const context = this.playerControllerUnDodgePlayerContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameserverDodgeListEntryDtoFromJSON));
    }



    /**
     */
    private playerControllerUnDodgePlayerValidation(requestParameters: PlayerControllerUnDodgePlayerRequest) {
        if (requestParameters.gameserverDodgePlayerDto === null || requestParameters.gameserverDodgePlayerDto === undefined) {
            throw new runtime.RequiredError('gameserverDodgePlayerDto','Required parameter requestParameters.gameserverDodgePlayerDto was null or undefined when calling playerControllerUnDodgePlayer.');
        }
    }

    /**
     */
    private async playerControllerStartRecalibrationRaw(requestParameters: PlayerControllerStartRecalibrationRequest): Promise<runtime.ApiResponse<void>> {
        this.playerControllerStartRecalibrationValidation(requestParameters);
        const context = this.playerControllerStartRecalibrationContext(requestParameters);
        const response = await this.request(context);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    private playerControllerStartRecalibrationValidation(requestParameters: PlayerControllerStartRecalibrationRequest) {
        if (requestParameters.gameserverStartRecalibrationDto === null || requestParameters.gameserverStartRecalibrationDto === undefined) {
            throw new runtime.RequiredError('gameserverStartRecalibrationDto','Required parameter requestParameters.gameserverStartRecalibrationDto was null or undefined when calling playerControllerStartRecalibration.');
        }
    }

}
