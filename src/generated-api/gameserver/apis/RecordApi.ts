/* tslint:disable */
/* eslint-disable */
/**
 * GameServer api
 * Matches, players, mmrs
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

import {
    GameserverPlayerDailyRecord,
    GameserverPlayerDailyRecordFromJSON,
    GameserverPlayerDailyRecordToJSON,
    GameserverPlayerRecordsResponse,
    GameserverPlayerRecordsResponseFromJSON,
    GameserverPlayerRecordsResponseToJSON,
} from '../models';

export interface RecordControllerPlayerRecordRequest {
    steamId: string;
}

/**
 *
 */
export class RecordApi extends runtime.BaseAPI {

    /**
     */
    recordControllerPlayerDailyContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/record/player_daily`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    recordControllerPlayerDaily = async (): Promise<Array<GameserverPlayerDailyRecord>> => {
        const response = await this.recordControllerPlayerDailyRaw();
        return await response.value();
    }

    /**
     */
    private async recordControllerPlayerDailyRaw(): Promise<runtime.ApiResponse<Array<GameserverPlayerDailyRecord>>> {
        this.recordControllerPlayerDailyValidation();
        const context = this.recordControllerPlayerDailyContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameserverPlayerDailyRecordFromJSON));
    }

    /**
     */
    private recordControllerPlayerDailyValidation() {
    }

    /**
     */
    private async recordControllerPlayerRecordRaw(requestParameters: RecordControllerPlayerRecordRequest): Promise<runtime.ApiResponse<GameserverPlayerRecordsResponse>> {
        this.recordControllerPlayerRecordValidation(requestParameters);
        const context = this.recordControllerPlayerRecordContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameserverPlayerRecordsResponseFromJSON(jsonValue));
    }



    /**
     */
    private recordControllerPlayerRecordValidation(requestParameters: RecordControllerPlayerRecordRequest) {
        if (requestParameters.steamId === null || requestParameters.steamId === undefined) {
            throw new runtime.RequiredError('steamId','Required parameter requestParameters.steamId was null or undefined when calling recordControllerPlayerRecord.');
        }
    }

    /**
     */
    recordControllerPlayerRecordContext(requestParameters: RecordControllerPlayerRecordRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/record/{steam_id}`.replace(`{${"steam_id"}}`, encodeURIComponent(String(requestParameters.steamId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    recordControllerPlayerRecord = async (steamId: string): Promise<GameserverPlayerRecordsResponse> => {
        const response = await this.recordControllerPlayerRecordRaw({ steamId: steamId });
        return await response.value();
    }

    /**
     */
    private async recordControllerRecordsRaw(): Promise<runtime.ApiResponse<GameserverPlayerRecordsResponse>> {
        this.recordControllerRecordsValidation();
        const context = this.recordControllerRecordsContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameserverPlayerRecordsResponseFromJSON(jsonValue));
    }



    /**
     */
    private recordControllerRecordsValidation() {
    }

    /**
     */
    recordControllerRecordsContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/record`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    recordControllerRecords = async (): Promise<GameserverPlayerRecordsResponse> => {
        const response = await this.recordControllerRecordsRaw();
        return await response.value();
    }

}
