/* tslint:disable */
/* eslint-disable */
/**
 * GameServer api
 * Matches, players, mmrs
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from "../runtime";

import {
  GameserverMatchDto,
  GameserverMatchDtoFromJSON,
  GameserverMatchPageDto,
  GameserverMatchPageDtoFromJSON,
  GameserverMatchReportMatrixDto,
  GameserverMatchReportMatrixDtoFromJSON,
} from "../models";

export interface MatchControllerGetMatchRequest {
  id: number;
}

export interface MatchControllerGetMatchReportMatrixRequest {
    id: number;
    steamId: string;
}

export interface MatchControllerHeroMatchesRequest {
    page: number;
    hero: string;
    perPage?: number;
}

export interface MatchControllerMatchesRequest {
    page: number;
    perPage?: number;
    mode?: number;
}

export interface MatchControllerPlayerMatchesRequest {
    id: string;
    page: number;
    perPage?: number;
    mode?: number;
    hero?: string;
}

/**
 *
 */
export class MatchApi extends runtime.BaseAPI {

    /**
     */
    private async matchControllerGetMatchRaw(requestParameters: MatchControllerGetMatchRequest): Promise<runtime.ApiResponse<GameserverMatchDto>> {
        this.matchControllerGetMatchValidation(requestParameters);
        const context = this.matchControllerGetMatchContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameserverMatchDtoFromJSON(jsonValue));
    }



    /**
     */
    private matchControllerGetMatchValidation(requestParameters: MatchControllerGetMatchRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling matchControllerGetMatch.');
        }
    }

    /**
     */
    matchControllerGetMatchContext(requestParameters: MatchControllerGetMatchRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/match/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    matchControllerGetMatch = async (id: number): Promise<GameserverMatchDto> => {
        const response = await this.matchControllerGetMatchRaw({ id: id });
        return await response.value();
    }

    /**
     */
    private async matchControllerGetMatchReportMatrixRaw(requestParameters: MatchControllerGetMatchReportMatrixRequest): Promise<runtime.ApiResponse<GameserverMatchReportMatrixDto>> {
        this.matchControllerGetMatchReportMatrixValidation(requestParameters);
        const context = this.matchControllerGetMatchReportMatrixContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameserverMatchReportMatrixDtoFromJSON(jsonValue));
    }



    /**
     */
    private matchControllerGetMatchReportMatrixValidation(requestParameters: MatchControllerGetMatchReportMatrixRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling matchControllerGetMatchReportMatrix.');
        }
        if (requestParameters.steamId === null || requestParameters.steamId === undefined) {
            throw new runtime.RequiredError('steamId','Required parameter requestParameters.steamId was null or undefined when calling matchControllerGetMatchReportMatrix.');
        }
    }

    /**
     */
    matchControllerGetMatchReportMatrixContext(requestParameters: MatchControllerGetMatchReportMatrixRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.steamId !== undefined) {
            queryParameters['steamId'] = requestParameters.steamId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/match/{id}/reportMatrix`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    matchControllerGetMatchReportMatrix = async (id: number, steamId: string): Promise<GameserverMatchReportMatrixDto> => {
        const response = await this.matchControllerGetMatchReportMatrixRaw({ id: id, steamId: steamId });
        return await response.value();
    }

    /**
     */
    private async matchControllerHeroMatchesRaw(requestParameters: MatchControllerHeroMatchesRequest): Promise<runtime.ApiResponse<GameserverMatchPageDto>> {
        this.matchControllerHeroMatchesValidation(requestParameters);
        const context = this.matchControllerHeroMatchesContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameserverMatchPageDtoFromJSON(jsonValue));
    }



    /**
     */
    private matchControllerHeroMatchesValidation(requestParameters: MatchControllerHeroMatchesRequest) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling matchControllerHeroMatches.');
        }
        if (requestParameters.hero === null || requestParameters.hero === undefined) {
            throw new runtime.RequiredError('hero','Required parameter requestParameters.hero was null or undefined when calling matchControllerHeroMatches.');
        }
    }

    /**
     */
    matchControllerHeroMatchesContext(requestParameters: MatchControllerHeroMatchesRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        if (requestParameters.hero !== undefined) {
            queryParameters['hero'] = requestParameters.hero;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/match/by_hero`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    matchControllerHeroMatches = async (page: number, hero: string, perPage?: number): Promise<GameserverMatchPageDto> => {
        const response = await this.matchControllerHeroMatchesRaw({ page: page, hero: hero, perPage: perPage });
        return await response.value();
    }

    /**
     */
    private async matchControllerMatchesRaw(requestParameters: MatchControllerMatchesRequest): Promise<runtime.ApiResponse<GameserverMatchPageDto>> {
        this.matchControllerMatchesValidation(requestParameters);
        const context = this.matchControllerMatchesContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameserverMatchPageDtoFromJSON(jsonValue));
    }



    /**
     */
    private matchControllerMatchesValidation(requestParameters: MatchControllerMatchesRequest) {
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling matchControllerMatches.');
        }
    }

    /**
     */
    matchControllerMatchesContext(requestParameters: MatchControllerMatchesRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/match/all`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    matchControllerMatches = async (page: number, perPage?: number, mode?: number): Promise<GameserverMatchPageDto> => {
        const response = await this.matchControllerMatchesRaw({ page: page, perPage: perPage, mode: mode });
        return await response.value();
    }

    /**
     */
    private async matchControllerPlayerMatchesRaw(requestParameters: MatchControllerPlayerMatchesRequest): Promise<runtime.ApiResponse<GameserverMatchPageDto>> {
        this.matchControllerPlayerMatchesValidation(requestParameters);
        const context = this.matchControllerPlayerMatchesContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => GameserverMatchPageDtoFromJSON(jsonValue));
    }



    /**
     */
    private matchControllerPlayerMatchesValidation(requestParameters: MatchControllerPlayerMatchesRequest) {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling matchControllerPlayerMatches.');
        }
        if (requestParameters.page === null || requestParameters.page === undefined) {
            throw new runtime.RequiredError('page','Required parameter requestParameters.page was null or undefined when calling matchControllerPlayerMatches.');
        }
    }

    /**
     */
    matchControllerPlayerMatchesContext(requestParameters: MatchControllerPlayerMatchesRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.perPage !== undefined) {
            queryParameters['per_page'] = requestParameters.perPage;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        if (requestParameters.hero !== undefined) {
            queryParameters['hero'] = requestParameters.hero;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/match/player/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    matchControllerPlayerMatches = async (id: string, page: number, perPage?: number, mode?: number, hero?: string): Promise<GameserverMatchPageDto> => {
        const response = await this.matchControllerPlayerMatchesRaw({ id: id, page: page, perPage: perPage, mode: mode, hero: hero });
        return await response.value();
    }

}
