/* tslint:disable */
/* eslint-disable */
/**
 * GameServer api
 * Matches, players, mmrs
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

import {
    GameserverHeroItemDto,
    GameserverHeroItemDtoFromJSON,
    GameserverHeroItemDtoToJSON,
    GameserverHeroSummaryDto,
    GameserverHeroSummaryDtoFromJSON,
    GameserverHeroSummaryDtoToJSON,
    GameserverItemDto,
    GameserverItemDtoFromJSON,
    GameserverItemDtoToJSON,
    GameserverItemHeroDto,
    GameserverItemHeroDtoFromJSON,
    GameserverItemHeroDtoToJSON,
} from '../models';

export interface MetaControllerHeroDataRequest {
    hero: string;
}

export interface MetaControllerItemDataRequest {
    item: number;
}

/**
 * 
 */
export class MetaApi extends runtime.BaseAPI {

    /**
     */
    private async metaControllerHeroDataRaw(requestParameters: MetaControllerHeroDataRequest): Promise<runtime.ApiResponse<Array<GameserverHeroItemDto>>> {
        this.metaControllerHeroDataValidation(requestParameters);
        const context = this.metaControllerHeroDataContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameserverHeroItemDtoFromJSON));
    }



    /**
     */
    private metaControllerHeroDataValidation(requestParameters: MetaControllerHeroDataRequest) {
        if (requestParameters.hero === null || requestParameters.hero === undefined) {
            throw new runtime.RequiredError('hero','Required parameter requestParameters.hero was null or undefined when calling metaControllerHeroData.');
        }
    }

    /**
     */
    metaControllerHeroDataContext(requestParameters: MetaControllerHeroDataRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/meta/heroes/{hero}`.replace(`{${"hero"}}`, encodeURIComponent(String(requestParameters.hero))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    metaControllerHeroData = async (hero: string): Promise<Array<GameserverHeroItemDto>> => {
        const response = await this.metaControllerHeroDataRaw({ hero: hero });
        return await response.value();
    }

    /**
     */
    private async metaControllerHeroesRaw(): Promise<runtime.ApiResponse<Array<GameserverHeroSummaryDto>>> {
        this.metaControllerHeroesValidation();
        const context = this.metaControllerHeroesContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameserverHeroSummaryDtoFromJSON));
    }



    /**
     */
    private metaControllerHeroesValidation() {
    }

    /**
     */
    metaControllerHeroesContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/meta/heroes`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    metaControllerHeroes = async (): Promise<Array<GameserverHeroSummaryDto>> => {
        const response = await this.metaControllerHeroesRaw();
        return await response.value();
    }

    /**
     */
    private async metaControllerItemDataRaw(requestParameters: MetaControllerItemDataRequest): Promise<runtime.ApiResponse<Array<GameserverItemHeroDto>>> {
        this.metaControllerItemDataValidation(requestParameters);
        const context = this.metaControllerItemDataContext(requestParameters);
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameserverItemHeroDtoFromJSON));
    }



    /**
     */
    private metaControllerItemDataValidation(requestParameters: MetaControllerItemDataRequest) {
        if (requestParameters.item === null || requestParameters.item === undefined) {
            throw new runtime.RequiredError('item','Required parameter requestParameters.item was null or undefined when calling metaControllerItemData.');
        }
    }

    /**
     */
    metaControllerItemDataContext(requestParameters: MetaControllerItemDataRequest): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/meta/items/{item}`.replace(`{${"item"}}`, encodeURIComponent(String(requestParameters.item))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    metaControllerItemData = async (item: number): Promise<Array<GameserverItemHeroDto>> => {
        const response = await this.metaControllerItemDataRaw({ item: item });
        return await response.value();
    }

    /**
     */
    private async metaControllerItemsRaw(): Promise<runtime.ApiResponse<Array<GameserverItemDto>>> {
        this.metaControllerItemsValidation();
        const context = this.metaControllerItemsContext();
        const response = await this.request(context);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameserverItemDtoFromJSON));
    }



    /**
     */
    private metaControllerItemsValidation() {
    }

    /**
     */
    metaControllerItemsContext(): runtime.RequestOpts {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        return {
            path: `/meta/items`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        };
    }

    /**
     */
    metaControllerItems = async (): Promise<Array<GameserverItemDto>> => {
        const response = await this.metaControllerItemsRaw();
        return await response.value();
    }

}
