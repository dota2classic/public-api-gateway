// tslint:disable
/**
 * GameServer api
 * Matches, players, mmrs
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface MatchDto
 */
export interface MatchDto {
    /**
     * 
     * @type {number}
     * @memberof MatchDto
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MatchDto
     */
    mode: MatchDtoModeEnum;
    /**
     * 
     * @type {Array<PlayerInMatchDto>}
     * @memberof MatchDto
     */
    radiant: Array<PlayerInMatchDto>;
    /**
     * 
     * @type {Array<PlayerInMatchDto>}
     * @memberof MatchDto
     */
    dire: Array<PlayerInMatchDto>;
}

/**
    * @export
    * @enum {string}
    */
export enum MatchDtoModeEnum {
    RANKED = 'RANKED',
    UNRANKED = 'UNRANKED',
    SOLOMID = 'SOLOMID',
    DIRETIDE = 'DIRETIDE',
    GREEVILING = 'GREEVILING',
    ABILITYDRAFT = 'ABILITY_DRAFT',
    TOURNAMENT = 'TOURNAMENT'
}

/**
 * 
 * @export
 * @interface MatchPageDto
 */
export interface MatchPageDto {
    /**
     * 
     * @type {Array<MatchDto>}
     * @memberof MatchPageDto
     */
    data: Array<MatchDto>;
    /**
     * 
     * @type {number}
     * @memberof MatchPageDto
     */
    pages: number;
    /**
     * 
     * @type {number}
     * @memberof MatchPageDto
     */
    perPage: number;
    /**
     * 
     * @type {number}
     * @memberof MatchPageDto
     */
    page: number;
}
/**
 * 
 * @export
 * @interface PlayerInMatchDto
 */
export interface PlayerInMatchDto {
    /**
     * 
     * @type {string}
     * @memberof PlayerInMatchDto
     */
    steam_id: string;
    /**
     * 
     * @type {number}
     * @memberof PlayerInMatchDto
     */
    team: number;
    /**
     * 
     * @type {string}
     * @memberof PlayerInMatchDto
     */
    hero: string;
    /**
     * 
     * @type {number}
     * @memberof PlayerInMatchDto
     */
    level: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInMatchDto
     */
    kills: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInMatchDto
     */
    deaths: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInMatchDto
     */
    assists: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInMatchDto
     */
    gpm: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInMatchDto
     */
    xpm: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInMatchDto
     */
    last_hits: number;
    /**
     * 
     * @type {number}
     * @memberof PlayerInMatchDto
     */
    denies: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof PlayerInMatchDto
     */
    items: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof PlayerInMatchDto
     */
    abandoned: boolean;
}

/**
 * MatchApi - axios parameter creator
 * @export
 */
export const MatchApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restControllerGetMatch: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling restControllerGetMatch.');
            }
            const localVarPath = `/match/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [perPage] 
         * @param {number} [mode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restControllerMatches: async (page: number, perPage?: number, mode?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling restControllerMatches.');
            }
            const localVarPath = `/match/all`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['per_page'] = perPage;
            }

            if (mode !== undefined) {
                localVarQueryParameter['mode'] = mode;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MatchApi - functional programming interface
 * @export
 */
export const MatchApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restControllerGetMatch(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchDto>> {
            const localVarAxiosArgs = await MatchApiAxiosParamCreator(configuration).restControllerGetMatch(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [perPage] 
         * @param {number} [mode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async restControllerMatches(page: number, perPage?: number, mode?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MatchPageDto>> {
            const localVarAxiosArgs = await MatchApiAxiosParamCreator(configuration).restControllerMatches(page, perPage, mode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MatchApi - factory interface
 * @export
 */
export const MatchApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restControllerGetMatch(id: number, options?: any): AxiosPromise<MatchDto> {
            return MatchApiFp(configuration).restControllerGetMatch(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} page 
         * @param {number} [perPage] 
         * @param {number} [mode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        restControllerMatches(page: number, perPage?: number, mode?: number, options?: any): AxiosPromise<MatchPageDto> {
            return MatchApiFp(configuration).restControllerMatches(page, perPage, mode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MatchApi - object-oriented interface
 * @export
 * @class MatchApi
 * @extends {BaseAPI}
 */
export class MatchApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchApi
     */
    public restControllerGetMatch(id: number, options?: any) {
        return MatchApiFp(this.configuration).restControllerGetMatch(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} page 
     * @param {number} [perPage] 
     * @param {number} [mode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MatchApi
     */
    public restControllerMatches(page: number, perPage?: number, mode?: number, options?: any) {
        return MatchApiFp(this.configuration).restControllerMatches(page, perPage, mode, options).then((request) => request(this.axios, this.basePath));
    }

}


